1 First, you'll need to setup Django Channels for handling WebSockets. This will allow you to have real-time communication between the client and the server.
2 You'll need to create a Django model for storing chat messages and a serializer for serializing/deserializing the data for transmission over WebSockets.
3 You'll then create views for handling the different chat functionalities, such as sending messages, retrieving previous messages, etc.
4 For integrating OpenAI, you can use the OpenAI API to send messages and receive the AI's responses. You can store the context information in the database and retrieve it when needed.
5 For group chat functionality, you can create a separate channel for each group and have users join/leave the channel as needed.


Current setup:

- I'm running a redis server through wsl ubuntu on my local machine
- In django I have configured th settings.py, routing.py and asgi.py to handle the channels configuration
- I have also created an app in my project called chat
- Inside chat I'm using 2 templates index.html and room.html representing the landingpage and the chat interface
- Inside chat I also created a file called consumer.py with the chatConsumer
- I have also created one model in models.py representing the messages (I must expand this to make sure I can store messages under a room and add contacts to this as well)

I can show you the code of the various relevant scripts.
